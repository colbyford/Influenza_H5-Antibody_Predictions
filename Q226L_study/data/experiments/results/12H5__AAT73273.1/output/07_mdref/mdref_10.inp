
! Parameters
eval ($ncores=36)
eval ($max_cpus=true)
eval ($mode="local")
eval ($batch_type="slurm")
eval ($queue_limit=100)
eval ($concat=1)
eval ($self_contained=false)
eval ($clean=false)
eval ($mol_fix_origin_1=false)
eval ($mol_shape_1=false)
eval ($ambig_fname="../data/07_mdref/ambig.tbl")
eval ($previous_ambig=false)
eval ($unambig_fname="")
eval ($hbond_fname="")
eval ($amb_scale=50)
eval ($unamb_scale=50)
eval ($hbond_scale=50)
eval ($randremoval=true)
eval ($npart=2)
eval ($contactairs=false)
eval ($kcont=1.0)
eval ($cmrest=false)
eval ($cmtight=true)
eval ($kcm=1.0)
eval ($dihe_fname="")
eval ($dihedrals_on=false)
eval ($dihedrals_scale=200)
eval ($error_dih=10)
eval ($dnarest_on=false)
eval ($sym_on=false)
eval ($ksym=10.0)
eval ($symtbl_fname="")
eval ($numc2sym=0)
eval ($numc3sym=0)
eval ($numc4sym=0)
eval ($numc5sym=0)
eval ($numc6sym=0)
eval ($nums3sym=0)
eval ($ncs_on=false)
eval ($kncs=1.0)
eval ($numncs=0)
eval ($w_air=0.1)
eval ($w_bsa=0.0)
eval ($w_cdih=0.0)
eval ($w_dani=0.1)
eval ($w_deint=0.0)
eval ($w_desolv=1.0)
eval ($w_elec=0.2)
eval ($w_lcc=-10000.0)
eval ($w_rg=1.0)
eval ($w_sani=0.1)
eval ($w_sym=0.1)
eval ($w_vdw=1.0)
eval ($w_vean=0.1)
eval ($w_xpcs=0.1)
eval ($w_xrdc=0.1)
eval ($w_zres=0.1)
eval ($ligand_param_fname="")
eval ($ligand_top_fname="")
eval ($elecflag=true)
eval ($dielec="cdie")
eval ($epsilon=1.0)
eval ($dihedflag=true)
eval ($sampling_factor=1)
eval ($solvent="water")
eval ($nemsteps=200)
eval ($timestep=0.002)
eval ($waterheatsteps=100)
eval ($watersteps=1250)
eval ($watercoolsteps=500)
eval ($iniseed=917)
eval ($keepwater=false)
eval ($tolerance=5)
eval ($log_level="quiet")
eval ($nseg1=-1)
eval ($nseg2=-1)
eval ($nseg3=-1)
eval ($nseg4=-1)
eval ($nseg5=-1)
eval ($nseg6=-1)
eval ($nseg7=-1)
eval ($nseg8=-1)
eval ($nseg9=-1)
eval ($nseg10=-1)
eval ($nseg11=-1)
eval ($nseg12=-1)
eval ($nseg13=-1)
eval ($nseg14=-1)
eval ($nseg15=-1)
eval ($nseg16=-1)
eval ($nseg17=-1)
eval ($nseg18=-1)
eval ($nseg19=-1)
eval ($nseg20=-1)
eval ($nfle1=0)
eval ($nfle2=0)
eval ($nfle3=0)
eval ($nfle4=0)
eval ($nfle5=0)
eval ($nfle6=0)
eval ($nfle7=0)
eval ($nfle8=0)
eval ($nfle9=0)
eval ($nfle10=0)
eval ($nfle11=0)
eval ($nfle12=0)
eval ($nfle13=0)
eval ($nfle14=0)
eval ($nfle15=0)
eval ($nfle16=0)
eval ($nfle17=0)
eval ($nfle18=0)
eval ($nfle19=0)
eval ($nfle20=0)
eval ($int_1_1=1.0)
eval ($int_1_2=1.0)
eval ($int_1_3=1.0)
eval ($int_1_4=1.0)
eval ($int_1_5=1.0)
eval ($int_1_6=1.0)
eval ($int_1_7=1.0)
eval ($int_1_8=1.0)
eval ($int_1_9=1.0)
eval ($int_1_10=1.0)
eval ($int_1_11=1.0)
eval ($int_1_12=1.0)
eval ($int_1_13=1.0)
eval ($int_1_14=1.0)
eval ($int_1_15=1.0)
eval ($int_1_16=1.0)
eval ($int_1_17=1.0)
eval ($int_1_18=1.0)
eval ($int_1_19=1.0)
eval ($int_1_20=1.0)
eval ($int_2_2=1.0)
eval ($int_2_3=1.0)
eval ($int_2_4=1.0)
eval ($int_2_5=1.0)
eval ($int_2_6=1.0)
eval ($int_2_7=1.0)
eval ($int_2_8=1.0)
eval ($int_2_9=1.0)
eval ($int_2_10=1.0)
eval ($int_2_11=1.0)
eval ($int_2_12=1.0)
eval ($int_2_13=1.0)
eval ($int_2_14=1.0)
eval ($int_2_15=1.0)
eval ($int_2_16=1.0)
eval ($int_2_17=1.0)
eval ($int_2_18=1.0)
eval ($int_2_19=1.0)
eval ($int_2_20=1.0)
eval ($int_3_3=1.0)
eval ($int_3_4=1.0)
eval ($int_3_5=1.0)
eval ($int_3_6=1.0)
eval ($int_3_7=1.0)
eval ($int_3_8=1.0)
eval ($int_3_9=1.0)
eval ($int_3_10=1.0)
eval ($int_3_11=1.0)
eval ($int_3_12=1.0)
eval ($int_3_13=1.0)
eval ($int_3_14=1.0)
eval ($int_3_15=1.0)
eval ($int_3_16=1.0)
eval ($int_3_17=1.0)
eval ($int_3_18=1.0)
eval ($int_3_19=1.0)
eval ($int_3_20=1.0)
eval ($int_4_4=1.0)
eval ($int_4_5=1.0)
eval ($int_4_6=1.0)
eval ($int_4_7=1.0)
eval ($int_4_8=1.0)
eval ($int_4_9=1.0)
eval ($int_4_10=1.0)
eval ($int_4_11=1.0)
eval ($int_4_12=1.0)
eval ($int_4_13=1.0)
eval ($int_4_14=1.0)
eval ($int_4_15=1.0)
eval ($int_4_16=1.0)
eval ($int_4_17=1.0)
eval ($int_4_18=1.0)
eval ($int_4_19=1.0)
eval ($int_4_20=1.0)
eval ($int_5_5=1.0)
eval ($int_5_6=1.0)
eval ($int_5_7=1.0)
eval ($int_5_8=1.0)
eval ($int_5_9=1.0)
eval ($int_5_10=1.0)
eval ($int_5_11=1.0)
eval ($int_5_12=1.0)
eval ($int_5_13=1.0)
eval ($int_5_14=1.0)
eval ($int_5_15=1.0)
eval ($int_5_16=1.0)
eval ($int_5_17=1.0)
eval ($int_5_18=1.0)
eval ($int_5_19=1.0)
eval ($int_5_20=1.0)
eval ($int_6_6=1.0)
eval ($int_6_7=1.0)
eval ($int_6_8=1.0)
eval ($int_6_9=1.0)
eval ($int_6_10=1.0)
eval ($int_6_11=1.0)
eval ($int_6_12=1.0)
eval ($int_6_13=1.0)
eval ($int_6_14=1.0)
eval ($int_6_15=1.0)
eval ($int_6_16=1.0)
eval ($int_6_17=1.0)
eval ($int_6_18=1.0)
eval ($int_6_19=1.0)
eval ($int_6_20=1.0)
eval ($int_7_7=1.0)
eval ($int_7_8=1.0)
eval ($int_7_9=1.0)
eval ($int_7_10=1.0)
eval ($int_7_11=1.0)
eval ($int_7_12=1.0)
eval ($int_7_13=1.0)
eval ($int_7_14=1.0)
eval ($int_7_15=1.0)
eval ($int_7_16=1.0)
eval ($int_7_17=1.0)
eval ($int_7_18=1.0)
eval ($int_7_19=1.0)
eval ($int_8_8=1.0)
eval ($int_8_9=1.0)
eval ($int_7_20=1.0)
eval ($int_8_10=1.0)
eval ($int_8_11=1.0)
eval ($int_8_12=1.0)
eval ($int_8_13=1.0)
eval ($int_8_14=1.0)
eval ($int_8_15=1.0)
eval ($int_8_16=1.0)
eval ($int_8_17=1.0)
eval ($int_8_18=1.0)
eval ($int_8_19=1.0)
eval ($int_8_20=1.0)
eval ($int_9_11=1.0)
eval ($int_9_12=1.0)
eval ($int_9_13=1.0)
eval ($int_9_14=1.0)
eval ($int_9_15=1.0)
eval ($int_9_16=1.0)
eval ($int_9_17=1.0)
eval ($int_9_18=1.0)
eval ($int_9_19=1.0)
eval ($int_9_20=1.0)
eval ($int_9_9=1.0)
eval ($int_9_10=1.0)
eval ($int_10_10=1.0)
eval ($int_10_11=1.0)
eval ($int_10_12=1.0)
eval ($int_10_13=1.0)
eval ($int_10_14=1.0)
eval ($int_10_15=1.0)
eval ($int_10_16=1.0)
eval ($int_10_17=1.0)
eval ($int_10_18=1.0)
eval ($int_10_19=1.0)
eval ($int_10_20=1.0)
eval ($int_11_11=1.0)
eval ($int_11_12=1.0)
eval ($int_11_13=1.0)
eval ($int_11_14=1.0)
eval ($int_11_15=1.0)
eval ($int_11_16=1.0)
eval ($int_11_17=1.0)
eval ($int_11_18=1.0)
eval ($int_11_19=1.0)
eval ($int_11_20=1.0)
eval ($int_12_12=1.0)
eval ($int_12_13=1.0)
eval ($int_12_14=1.0)
eval ($int_12_15=1.0)
eval ($int_12_16=1.0)
eval ($int_12_17=1.0)
eval ($int_12_18=1.0)
eval ($int_12_19=1.0)
eval ($int_12_20=1.0)
eval ($int_13_13=1.0)
eval ($int_13_14=1.0)
eval ($int_13_15=1.0)
eval ($int_13_16=1.0)
eval ($int_13_17=1.0)
eval ($int_13_18=1.0)
eval ($int_13_19=1.0)
eval ($int_13_20=1.0)
eval ($int_14_14=1.0)
eval ($int_14_15=1.0)
eval ($int_14_16=1.0)
eval ($int_14_17=1.0)
eval ($int_14_18=1.0)
eval ($int_14_19=1.0)
eval ($int_14_20=1.0)
eval ($int_15_15=1.0)
eval ($int_15_16=1.0)
eval ($int_15_17=1.0)
eval ($int_15_18=1.0)
eval ($int_15_19=1.0)
eval ($int_15_20=1.0)
eval ($int_16_16=1.0)
eval ($int_16_17=1.0)
eval ($int_16_18=1.0)
eval ($int_16_19=1.0)
eval ($int_16_20=1.0)
eval ($int_17_17=1.0)
eval ($int_17_18=1.0)
eval ($int_17_19=1.0)
eval ($int_17_20=1.0)
eval ($int_18_18=1.0)
eval ($int_18_19=1.0)
eval ($int_18_20=1.0)
eval ($int_19_19=1.0)
eval ($int_19_20=1.0)
eval ($int_20_20=1.0)
eval ($mol_fix_origin_2=false)
eval ($mol_shape_2=false)
eval ($mol_fix_origin_3=false)
eval ($mol_fix_origin_4=false)
eval ($mol_fix_origin_5=false)
eval ($mol_fix_origin_6=false)
eval ($mol_fix_origin_7=false)
eval ($mol_fix_origin_8=false)
eval ($mol_fix_origin_9=false)
eval ($mol_fix_origin_10=false)
eval ($mol_shape_3=false)
eval ($mol_shape_4=false)
eval ($mol_shape_5=false)
eval ($mol_shape_6=false)
eval ($mol_shape_7=false)
eval ($mol_shape_8=false)
eval ($mol_shape_9=false)
eval ($mol_shape_10=false)
eval ($ambig_fname="../data/07_mdref/ambig.tbl")

! Input structure
structure
  @@../00_topoaa/7fah_renumberedLplus1000_oneAchain_haddock.psf
end
structure
  @@../00_topoaa/AAT73273.1_renumberedAplus110_oneBchain_haddock.psf
end
coor @@../04_flexref/flexref_8.pdb
eval ($input_pdb_filename_1="../04_flexref/flexref_8.pdb")
eval ($ncomponents=2)
eval ($seed=369)

! Output structure
eval ($output_pdb_filename="mdref_10.pdb")
eval ($count=10)
eval ($prot_segid_1="A")
eval ($prot_segid_2="B")
! mdref.cns
!    Perform an explitic solvent (water or dmso) refinement
!
! ***********************************************************************
! * Copyright 2003-2022 Alexandre Bonvin, Utrecht University.           *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

if ( $log_level = "verbose" ) then
    set message=normal echo=on end
elseif ( $log_level = "normal" ) then
    set message=normal echo=off end
else
    set message=off echo=off end
end if

!==================================================================!
! Initialisation of variables
!==================================================================!

evaluate ($saprotocol.iniseed=$iniseed)
evaluate ($saprotocol.timestep=$timestep)
evaluate ($saprotocol.fbeta=100)
evaluate ($saprotocol.mass=100)

evaluate ($ini_count    =1)

evaluate ($data.ncomponents=$ncomponents)


! non-bonded parameter set to use
evaluate ($toppar.par_nonbonded = "OPLSX")


! dihedrals, DNA and distance restraints
evaluate ($Data.dnarest =$dnarest_on)
evaluate ($Data.flags.cdih =$dihedrals_on)
evaluate ($Data.cdih.on =$dihedrals_on)
evaluate ($Data.ssdihed =$ssdihed)
evaluate ($Data.error_dih =$error_dih)
evaluate ($data.dihedrals.on=$dihedrals_on)
evaluate ($data.dihedrals_scale=$dihedrals_scale)

! planarity restraints
evaluate ($Data.flags.plan =  false)

! distance restraints
evaluate ($Data.flags.noe  =  true)
evaluate ($data.randremoval=$randremoval)
evaluate ($data.npart=$npart)

evaluate ($data.amb_scale=$amb_scale)
evaluate ($data.unamb_scale=$unamb_scale)
evaluate ($data.hbond_scale=$hbond_scale)

evaluate ($data.cmrest=$cmrest)
evaluate ($data.cmtight=$cmtight)
evaluate ($data.kcm=$kcm)
evaluate ($data.contactairs=$contactairs)
evaluate ($data.kcont=$kcont)
if ($data.contactairs eq true) then
    evaluate ($data.randremoval = false)
end if

! NCS restraints
evaluate ($data.kncs = $kncs)
evaluate ($Data.flags.ncs = $ncs_on)
evaluate ($data.numncs = $numncs)

! Symmetry restraints
evaluate ($data.ksym = $ksym)
evaluate ($Data.flags.sym = $sym_on)
evaluate ($data.numc2sym = $numc2sym)
evaluate ($data.numc3sym = $numc3sym)
evaluate ($data.nums3sym = $nums3sym)
evaluate ($data.numc4sym = $numc4sym)
evaluate ($data.numc5sym = $numc5sym)
evaluate ($data.numc6sym = $numc6sym)

!Electrostatics:
evaluate ($Data.flags.dihed =$dihedflag)
evaluate ($Data.flags.elec =$elecflag)
evaluate ($Data.epsilon =$epsilon)
evaluate ($Data.dielec  =$dielec)

!Interaction matrix:
evaluate ($nmol1=1)
while ($nmol1 <=$data.ncomponents) loop mol1
    evaluate ($nmol2=$nmol1 + 1)
    evaluate ($scale.int_$nmol1_$nmol1 =$int_$nmol1_$nmol1)
    while ($nmol2 <=$data.ncomponents) loop mol2
        evaluate ($scale.int_$nmol1_$nmol2 =$int_$nmol1_$nmol2)
        evaluate ($scale.int_$nmol2_$nmol1 =$int_$nmol1_$nmol2)
        evaluate ($nmol2=$nmol2 + 1)
    end loop mol2
    evaluate ($nmol1 = $nmol1 + 1)
end loop mol1


! Unsupported restraints
evaluate ($Data.flags.em   = false)
evaluate ($Data.flags.rg   = false)
evaluate ($Data.flags.zres = false)
evaluate ($Data.flags.sani = false)
evaluate ($Data.flags.xrdc = false)
evaluate ($Data.flags.xpcs = false)
evaluate ($Data.flags.dani = false)
evaluate ($Data.flags.vean = false)

! Other parameters
evaluate ($refine.keepwater = false)
evaluate ($refine.keepwater=$keepwater)
evaluate ($refine.solvent=$solvent)
evaluate ($refine.heatsteps=$waterheatsteps)
evaluate ($refine.steps=$watersteps)
evaluate ($refine.coolsteps=$watercoolsteps)

!==================================================================!

{* Read paramters and set various force field related variables *}

@MODULE:read_param.cns

parameter
    bond  (resn WAT ) (resn WAT ) 1000 TOKEN
    angle (resn WAT ) (resn WAT ) (resn WAT ) 500 TOKEN
    bond  (resn HOH ) (resn HOH ) 1000 TOKEN
    angle (resn HOH ) (resn HOH ) (resn HOH ) 500 TOKEN
    bond  (resn TIP*) (resn TIP*) 1000 TOKEN
    angle (resn TIP*) (resn TIP*) (resn TIP*) 500 TOKEN
end

igroup
    interaction  (not (resn ANI or resn DAN or resn XAN or resn DUM or resn SHA))
                 (not (resn ANI or resn DAN or resn XAN or resn DUM or resn SHA)) weight * 1 end
    interaction  (resn ANI or resn DAN or resn XAN or resn DUM or resn DUM)
                 (resn ANI or resn DAN or resn XAN or resn DUM or resn DUM) weight * 1 vdw 0.0 elec 0.0 end
    interaction  (resn SHA) (not resn SHA) weight * 0 end
end

flag include bond angle impr vdw end

if ($Data.flags.dihed eq true) then
  flag include dihed end
end if

if ($Data.flags.elec eq true) then
    flag include elec end
    if ($Data.dielec eq "rdie") then
        parameter nbonds eps=$Data.epsilon rdie shift switch end end
        ! shift statement needed first to activate switch (CNS bug?)
    else
        parameter nbonds eps=$Data.epsilon cdie end end
    end if
    parameter nbonds ? end end
else
    evaluate ($elec=0.0)
    flag exclude elec end
end if

coor copy end

topology @@TOPPAR:solvent-allhdg5-4.top end

if ($refine.solvent = "water") then
    do (segid = "PROT") (segid "    ")
    @MODULE:generate_water.cns
    do (segid = "    ") (segid "PROT")
elseif ($refine.solvent = "dmso") then
    do (segid = "PROT") (segid "    ")
    @MODULE:generate_dmso.cns
    do (segid = "    ") (segid "PROT")
end if

{* Read and write random seed in case randremoval=true ===============*}

if ($Data.randremoval eq true) then
    evaluate ($fileseed= $input_pdb_filename_1 - ".pdb" + ".seed")
    fileexist $fileseed end
    if ($result eq true) then
        @@$fileseed (seed=$seed;npart=$npart )
    else
        evaluate ($seed = $count*$Saprotocol.iniseed)
    end if
    evaluate ($fileseed=$output_pdb_filename - ".pdb" + ".seed")
    set display=$fileseed end
    display module(seed;npart)
    display define (
    display currentseed = $seed;
    display currentpart = $npart;
    display )
    display evaluate (&seed=&currentseed)
    display evaluate (&npart=&currentpart)
    close $fileseed end
else
    evaluate ($seed = $count*$Saprotocol.iniseed)
end if
set seed $seed end


{* Read the distance restraints ================================ *}
set message=normal echo=on end
inline @MODULE:read_data.cns

! random removal of restaints
if ($Data.randremoval eq true) then
    noe cv $npart ? end
else
    evaluate ($npart = 0)
end if

if ( $log_level = "verbose" ) then
    set message=normal echo=on end
elseif ( $log_level = "normal" ) then
    set message=normal echo=off end
else
    set message=off echo=off end
end if


evaluate ($numnoe = 0)

!Make sure that at least as many distance restraints are successfully
!read as the number of partitions for cross-validation
evaluate ($numnoe = 999)
noe ? end
if ($NUMNOE = 0) then
    if ($Data.ncomponents > 1) then
        if ($Data.contactairs eq FALSE) then
            if ($Data.cmrest eq FALSE) then
                evaluate ($errfile = "MODDIR:WARNING")
                fileexist $errfile end
                if ($result eq false) then
                    set display=$errfile end
                    display TOTAL NUMBER OF DISTANCE RESTRAINTS FOR FLEXIBLE REFINEMENT IS ZERO!
                    display CONTROL YOUR PARAMETER SETTINGS AND RESTRAINT DEFINITIONS
                    close $errfile end
                end if
            end if
        end if
    end if
    evaluate ($Data.npart = 1)
    evaluate ($Data.randremoval = FALSE)
end if

if ($NUMNOE lt $Data.npart) then
    noe part=1 end
    evaluate ($Data.npart = 1)
    evaluate ($Data.randremoval = FALSE)
end if

noe
    averaging  * sum
    potential  * soft
    scale      * 1.0
    scale ambi $amb_scale 
    scale dist $unamb_scale
    scale hbon $hbond_scale
    sqconstant * 1.0
    sqexponent * 2
    soexponent * 1
    rswitch    * 0.5
    sqoffset   * 0.0
    asymptote  * 0.1
    msoexponent * 1
    masymptote  * -0.1
    mrswitch    * 0.5
    avexpo hbond 20
end

{* set the energy flags ======================================================== *}

inline @MODULE:setflags.cns


{* Check for other restraints ================================================== *}

@MODULE:symmultimer.cns

if ($Data.cmrest eq true ) then
    @MODULE:cm-restraints.cns
end if

if ($Data.contactairs eq true ) then
    @MODULE:contactairs.cns
end if

if ($Data.dnarest eq true ) then
    @MODULE:dna-rna_restraints.cns
end if

if ($Data.ssdihed eq "all" ) then
    inline @MODULE:protein-ss-restraints-all.cns
end if
if ($Data.ssdihed eq "alpha" ) then
    inline @MODULE:protein-ss-restraints-alpha.cns
end if
if ($Data.ssdihed eq "alphabeta" ) then
    inline @MODULE:protein-ss-restraints-alpha-beta.cns
end if


{* Check for the presence of ions and add distance restraints / covalent bond == *}

@MODULE:restrain-ions.cns


{* Energy minimisation of solvent first ============================================= *}

! fix everything except the solvent for initial minimization
fix sele = (not (resn WAT or resn HOH or resn TIP* or resn DMS)) end

minimize powell nstep=$nemsteps drop=100 end


{* Energy minimisation with harmonic restraints on the molecules ==================== *}

fix sele = (not all) end

! fix the shape
fix sele = (resn SHA) end

! fix rigid molecules 
evaluate($nchain1 = 0)
while ($nchain1 < $data.ncomponents) loop nloop1
    evaluate($nchain1 = $nchain1 + 1)
    evaluate($fcounter=0)
    if ($nseg$nchain1 = 0) then
        display NO FLEXIBLE SIDE-CHAINS SEGMENTS for molecule $nchain1
        display FIXING IT
        fix sele = (segid $prot_segid_$nchain1 and not name H*) end
    end if
end loop nloop1

do (refx=x) (all)
do (refy=y) (all)
do (refz=z) (all)

! Define harmonic restraints on heavy atoms of molecules
restraints harmonic 
    exponent = 2
end
do (harm = 0)  (all)
do (harm = 5) (not name h* and not (resn WAT or resn HOH or resn TIP* or resn DMS))

igroup
    interaction (not (resn ANI or resn DAN or resn XAN or resn SHA)) (not (resn ANI or resn DAN or resn XAN or resn SHA)) weight * 1 end
    interaction (resn ANI or resn DAN or resn XAN)
                (resn ANI or resn DAN or resn XAN) weight * 1 vdw 0.0 elec 0.0 end
end

minimize powell nstep=$nemsteps drop=10 end


{* MD refinement with harmonic restraints on the molecules ==================== *}

do (refx=x) (all)
do (refy=y) (all)
do (refz=z) (all)

! Define harmonic restraints on heavy atoms of molecules
do (harm = 0)  (all)
do (harm = 5)  (not name h* and not resn ANI and not resn DAN and not resn XAN and not (resn WAT or resn HOH or resn TIP3))
do (harm = 20) (resn ANI and name OO)
do (harm = 20) (resn DAN and name OO)

! Remove harmonic restraints on interface side-chains
@MODULE:flex_segment_side.cns
eval ($nchain1 = 0)
while ($nchain1 < $data.ncomponents) loop nloop1
    eval ($nchain1=$nchain1+1)
    do (harm = 0)  (attribute store5 = $nchain1 and 
                    not ( name CA or name BB or name C or name N or name P or name C# or name C## ))
end loop nloop1


! Start MD refinement

do (mass =$Saprotocol.mass) (all)
do (mass=1000) (resn ANI or resn DAN or resn XAN)
do (fbeta = 0) (all)
do (fbeta = $Saprotocol.fbeta {1/ps} ) ( all )                

! heat to 300 K
for $bath in (100 200 300) loop heat

    do (vx=maxwell($bath)) (all)
    do (vy=maxwell($bath)) (all)
    do (vz=maxwell($bath)) (all)  

    dynamics cartesian
        nstep=$refine.heatsteps timest=0.002{ps}       
        temperature=$bath  tcoupling = true
        nprint=50 
    end

end loop heat

do (refx=x) (all)
do (refy=y) (all)
do (refz=z) (all)

!define weaker harmonic restraints on heavy atoms of molecules
do (harm = 0)  (all)
do (harm = 1)  (not name h* and not resn ANI and not resn DAN and not resn XAN and not (resn WAT or resn HOH or resn TIP3))

!define flexible segments and remove harmonic restraints on backbone + side-chains of interface
@MODULE:flex_segment_back.cns
eval ($nchain1 = 0)
while ($nchain1 < $data.ncomponents) loop nloop1
    eval ($nchain1=$nchain1+1)
    do (harm = 0)  (attribute store5 = $nchain1) 
end loop nloop1
do (harm = 20) (resn ANI and name OO)
do (harm = 20) (resn DAN and name OO)

! MD refinement
dynamics cartesian
   nstep=$refine.steps timest=0.002{ps}      
   temperature=$bath  tcoupling = true
   nprint=50 
end 

do (refx=x) (all)
do (refy=y) (all)
do (refz=z) (all)

! Define weak harmonic restraints on backbone only of molecules
do (harm = 0)  (all)
do (harm = 1)  (name CA or name BB or name C or name N or name P or name C# or name C##)
! Remove harmonic restraints on interface side-chains
@MODULE:flex_segment_side.cns
eval ($nchain1 = 0)
while ($nchain1 < $data.ncomponents) loop nloop1
    eval ($nchain1=$nchain1+1)
    do (harm = 0)  (attribute store5 = $nchain1) 
end loop nloop1
do (harm = 20) (resn ANI and name OO)
do (harm = 20) (resn DAN and name OO)


! cooling phase 
for $bath in (300 200 100) loop cool

    dynamics cartesian
       nstep=$refine.coolsteps timest=0.002{ps}      
       temperature=$bath  tcoupling = true                       
       nprint=50 
    end
    
end loop cool


! final minimization without harmonic restraints

flag excl harm end
mini powell nstep $nemsteps drop=10 end


{* ======================= calculate free molecules internal energy *}

igroup
    interaction (not (resn ANI or resn DAN or resn XAN or resn SHA or resn WAT or resn HOH or resn TIP* or resn DUM)) 
                (not (resn ANI or resn DAN or resn XAN or resn SHA or resn WAT or resn HOH or resn TIP* or resn DUM)) weight * 1 end
end

do (refx=x) (all)
do (refy=y) (all)
do (refz=z) (all)

fix sele=(resn ANI or resn DAN or resn XAN or resn SHA or resn WAT or resn HOH or resn TIP* or resn DMS) end

flag excl noe dani sani vean xrdc xpcs coll cdih zhar end
flag include bond angle dihe impr vdw end

evaluate ($elec = 0.0)
evaluate ($eintfree = 0.0)
if ($Data.flags.elec eq true) then
    flag include elec end
end if

if ($Data.dielec eq "rdie") then
    parameter nbonds eps=$Data.epsilon rdie shift switch end end
    ! shift statement needed first to activate switch (CNS bug?)
else
    parameter nbonds eps=$Data.epsilon cdie end end
end if
parameter nbonds ? end end
inline @MODULE:calc_free-ene.cns

fix sele=(not all) end

do (x = refx) (all)
do (y = refy) (all)
do (z = refz) (all)


{* ===================== calculate complex internal energy *}

evaluate ($kinter = 1.0)
flag include bond angle dihe impr vdw end
energy end

@MODULE:scale_intra_only.cns

evaluate ($elec = 0.0)
evaluate ($eintcplx = 0.0)
if ($Data.flags.elec eq true) then
    flag include elec end
end if

energy end

evaluate ($eintcplx = $bond + $angl + $impr + $dihe + $vdw + $elec)


{* ===================== calculate final energies and write structure *}
evaluate ($cdih=0.0)
flag incl noe cdih end
if ($Data.ncomponents > 1) then
    evaluate ($kinter = 1.0)
    @MODULE:scale_inter_final.cns
else
    @MODULE:scale_intra_only.cns
end if

noe
    scale dist $Data.unamb_scale
    scale ambi $Data.amb_scale
    scale hbon $Data.hbond_scale
    scale symm 0.0
    scale cont 0.0
end
energy end
evaluate ($eair= $noe)

evaluate ($esym = 0.0)
evaluate ($ncs = 0.0)
evaluate ($zhar = 0.0)
evaluate ($rms_test_noe = 0.0)
evaluate ($violations_test_noe = 0)
if ($Data.flags.sym eq true) then
    ! calculatee first the symmetry energy
    noe reset nres= 1200000 end
    @MODULE:symmultimer.cns
    noe
        scale symm $Data.ksym
    end
    energy end
    evaluate ($esym = $noe)
    if ($Data.randremoval eq true) then
        evaluate ($violations_test_noe=0)
        evaluate ($rms_test_noe=0.0)
        display Print out of cross-validated violations and rms not
        display possible in combination with symmetry restraints
        display CV values set therefore to 0
    end if
    noe reset end
    set message=normal echo=on end
    !read back all the distance restraints:
    @@MODULE:read_noes.cns
    noe
        scale dist $Data.unamb_scale
        scale ambi $Data.amb_scale
        scale hbon $Data.hbond_scale
    end
else
    print threshold=0.3 noe
    evaluate ($rms_noe=$result)
    evaluate ($violations_noe=$violations)
    if ($Data.randremoval eq true) then
        evaluate ($rms_test_noe=$test_rms)
        evaluate ($violations_test_noe=$test_violations)
    end if
end if 

if ($Data.dnarest eq true ) then
    @MODULE:dna-rna_restraints.cns
end if

energy end
evaluate ($etot = $ener - $noe)
evaluate ($noe = $eair)
evaluate ($etot = $etot + $noe)

inline @MODULE:print_coorheader.cns


{* determine whether the final models should be reoriented along their principal *}
{* axes before writing to file ================================================= *}
eval($reorient = true)
evaluate ($ncount = 0)
while ($ncount < $data.ncomponents) loop orientmol
    evaluate ($ncount = $ncount + 1)
    eval($watersegname_$ncount="WA" + encode($ncount))
    if ($mol_fix_origin_$ncount eq true) then
        eval($reorient = false)
    end if
end loop orientmol

if ($reorient = true) then
    coor sele= (not name H* and not resn ANI and not resn XAN and not resn DAN) orient end
end if

write coordinates sele=(not (resn WA* or resn HOH or resn TIP* or resn DMS)) format=pdbo output=$output_pdb_filename end

set message=normal echo=on end

display OUTPUT: $output_pdb_filename

if ($refine.keepwater eq true) then
    evaluate ($filename= $output_pdb_filename - ".pdb" + "_solvent.pdb")
    write coordinates sele=(all) format=pdbo output=$filename end
end if

set message=normal echo=on end

display OUTPUT: $output_pdb_filename

stop

